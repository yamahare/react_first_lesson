{"version":3,"sources":["logo.svg","App.js","Form.js","Click.js","Countup.js","serviceWorker.js","index.js"],"names":["module","exports","printMsg","msg","size","color","p_style","fontSize","border","style","App","th","backgroundColor","padding","td","className","src","logo","alt","href","target","rel","name","mail","age","map","value","Form","useState","message","setMessage","type","id","onChange","event","in_val","Click","counter","setCounter","onClick","Countup","useEffect","interval","setInterval","clearInterval","Boolean","window","location","hostname","match","elm","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,yKCIvCC,G,MAAW,SAACC,EAAKC,EAAMC,GACzB,IAAMC,EAAU,CACdC,SAAS,GAAD,OAAKH,EAAL,MACRC,MAAM,GAAD,OAAKA,GACVG,OAAQ,kBAEV,OAAO,uBAAGC,MAAOH,GAAUH,KA8DdO,MA3Df,WAEE,IAMMC,EAAK,CACTN,MAAO,QACPO,gBAAiB,OACjBC,QAAS,YAELC,EAAK,CACTT,MAAO,QACPQ,QAAS,WACTL,OAAQ,kBAQV,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACxChB,EAAS,mDAAY,GAAI,QACzBA,EAAS,8CAAY,GAAI,QACzBA,EAAS,8CAAY,GAAI,QAC1B,uBAAGa,UAAU,WAAWI,KA7BlB,iDA6B6BC,OAAO,SAASC,IAAI,uBAAvD,gBAKK,+CAEL,oCAGF,2BAAOZ,MArCG,CACZF,SAAU,OACVM,QAAS,aAoCL,4BACE,wBAAIJ,MAAOE,GAAX,QACA,wBAAIF,MAAOE,GAAX,QACA,wBAAIF,MAAOE,GAAX,QA3BK,CACT,CAACW,KAAM,OAAQC,KAAM,gBAAiBC,IAAK,IAC3C,CAACF,KAAM,SAAUC,KAAM,kBAAmBC,IAAK,IAC/C,CAACF,KAAM,UAAWC,KAAM,mBAAoBC,IAAK,KA0BzCC,KAAI,SAACC,GAAD,OACR,4BACE,wBAAIjB,MAAOK,GAAKY,EAAMJ,MACtB,wBAAIb,MAAOK,GAAKY,EAAMH,MACtB,wBAAId,MAAOK,GAAKY,EAAMF,Y,OC7CnBG,MAjBf,WAAgB,IAAD,EACmBC,mBAAS,wCAD5B,mBACJC,EADI,KACKC,EADL,KAOX,OACI,6BACI,2BAAID,GACJ,6BACI,2BAAOE,KAAK,OAAOC,GAAG,QAAQC,SAR3B,SAACC,GACZ,IAAIC,EAASD,EAAMd,OAAOM,MAC1BI,EAAW,iCAASK,EAAS,sBCQtBC,MAbf,WAAiB,IAAD,EACkBR,mBAAS,GAD3B,mBACLS,EADK,KACIC,EADJ,KAGZ,OACI,6BACI,qCACWD,GAEX,4BAAQE,QAAS,kBAAMD,EAAWD,EAAQ,KAA1C,gDCWGG,MAnBf,WAAmB,IAAD,EACgBZ,mBAAS,GADzB,mBACPS,EADO,KACEC,EADF,KAUd,OAPAG,qBAAU,WACN,IAAMC,EAAWC,aAAY,WAC7BL,EAAWD,EAAQ,KAChB,KACH,OAAO,kBAAMO,cAAcF,MAC5B,CAACL,IAGA,6BACI,qCACWA,KCHHQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAIC,EACA,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGRC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDgHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2d3f5287.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet printMsg = (msg, size, color) => {\n  const p_style = {\n    fontSize: `${size}px`,\n    color: `${color}`,\n    border: '1px solid blue'\n  }\n  return <p style={p_style}>{msg}</p>;\n}\n\nfunction App() {\n\n  const url = 'https://yamahare.github.io/react_first_lesson/';\n  const flg = true;\n  const table = {\n    fontSize: \"16px\",\n    padding: \"5px 50px\",\n  }\n  const th = {\n    color: 'white',\n    backgroundColor: \"#006\",\n    padding: \"5px 15px\",\n  }\n  const td = {\n    color: 'black',\n    padding: '5px 15px',\n    border: '1px solid gray'\n  }\n  const data = [\n      {name: 'Taro', mail: 'taro@mail.com', age: 45},\n      {name: 'Hanako', mail: 'hanako@mail.com', age: 10},\n      {name: 'Tanjiro', mail: 'tanjiro@mail.com', age: 20}\n  ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {printMsg('最初のメッセージ', 30, '#ddd')}\n        {printMsg('2番目メッセージ', 20, '#aaa')}\n        {printMsg('3番目メッセージ', 10, '#333')}\n        <a className=\"App-link\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n      </header>\n\n      {flg ? <p>trueだよ</p> : <p>falseだよ</p> }\n      {(()=>\n        <dl>test</dl> \n      )()}\n\n      <table style={table}>\n        <tr>\n          <th style={th}>name</th>\n          <th style={th}>mail</th>\n          <th style={th}>age</th>\n        </tr>\n        {data.map((value) => (\n          <tr>\n            <td style={td}>{value.name}</td>\n            <td style={td}>{value.mail}</td>\n            <td style={td}>{value.age}</td>\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\n\nfunction Form(){\n    const [message, setMessage] = useState(\"お名前どぞ～\");\n\n    let doChange = (event) => {\n        let in_val = event.target.value;\n        setMessage('こんにちは'+ in_val + 'さん');\n    }\n    return (\n        <div>\n            <p>{message}</p>\n            <div>\n                <input type=\"text\" id=\"input\" onChange={doChange} />\n            </div>\n        </div>\n    )\n}\n\nexport default Form;","import React, { useState } from 'react';\n\nfunction Click(){\n    const [counter, setCounter] = useState(0);\n\n    return (\n        <div>\n            <p>\n               count: {counter} \n            </p>\n            <button onClick={() => setCounter(counter+1)}>カウントアップ</button>\n        </div>\n    )\n}\n\nexport default Click;","import React, { useState, useEffect } from 'react';\n\nfunction Countup(){\n    const [counter, setCounter] = useState(0);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n        setCounter(counter+1)\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [counter]);\n\n    return (\n        <div>\n            <p>\n               count: {counter} \n            </p>\n        </div>\n    )\n}\n\nexport default Countup;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Form from './Form';\nimport Click from './Click';\nimport Countup from './Countup';\nimport * as serviceWorker from './serviceWorker';\n\nlet elm = (\n    <div>\n        <App></App>\n        <Countup></Countup>\n        <Click></Click>\n        <Form></Form>\n    </div>\n);\nReactDOM.render(elm, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}